//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/SurviveControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SurviveControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SurviveControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SurviveControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""a9d270c4-a652-43fd-92ca-5c8954ef400e"",
            ""actions"": [
                {
                    ""name"": ""Player1_Axis"",
                    ""type"": ""Value"",
                    ""id"": ""2aac7a61-dc06-4b33-b56b-a0c06c4232a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player1_Jump"",
                    ""type"": ""Button"",
                    ""id"": ""34a10d2a-ca3c-45f2-bc4c-6fc4c1c85d65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Player1_Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""e8d45c9e-6ce4-4715-8489-f23fdd6c7865"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb19df48-1785-4550-b15d-5423dee22cbd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Player1_Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""b1ca02b2-9749-4823-9a0c-e5ae48b42e79"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1_Axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6c6d611e-da70-4416-8692-9abbbb031d6f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Player1_Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ff9a2571-50f6-4dd9-98e7-73b49c039f0d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Player1_Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""593b1d0b-de4c-4b0f-a0f6-584b487d686a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Player1_Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e15ec1a2-2029-4b80-9edc-485570ffe7f5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Player1_Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7d9f6859-a8a8-400d-b772-75c03083268a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Player1_Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b74c681-a4fd-424b-9572-7b4829ce6b8f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Player1_Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a721553-6364-40c6-9321-21d9a7a1dd23"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Player1_Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc88f2c8-bd6a-4ac5-a572-122f3f24b048"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Player1_Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Player1_Axis = m_Player.FindAction("Player1_Axis", throwIfNotFound: true);
        m_Player_Player1_Jump = m_Player.FindAction("Player1_Jump", throwIfNotFound: true);
        m_Player_Player1_Shoot = m_Player.FindAction("Player1_Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Player1_Axis;
    private readonly InputAction m_Player_Player1_Jump;
    private readonly InputAction m_Player_Player1_Shoot;
    public struct PlayerActions
    {
        private @SurviveControls m_Wrapper;
        public PlayerActions(@SurviveControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player1_Axis => m_Wrapper.m_Player_Player1_Axis;
        public InputAction @Player1_Jump => m_Wrapper.m_Player_Player1_Jump;
        public InputAction @Player1_Shoot => m_Wrapper.m_Player_Player1_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Player1_Axis.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayer1_Axis;
                @Player1_Axis.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayer1_Axis;
                @Player1_Axis.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayer1_Axis;
                @Player1_Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayer1_Jump;
                @Player1_Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayer1_Jump;
                @Player1_Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayer1_Jump;
                @Player1_Shoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayer1_Shoot;
                @Player1_Shoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayer1_Shoot;
                @Player1_Shoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlayer1_Shoot;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Player1_Axis.started += instance.OnPlayer1_Axis;
                @Player1_Axis.performed += instance.OnPlayer1_Axis;
                @Player1_Axis.canceled += instance.OnPlayer1_Axis;
                @Player1_Jump.started += instance.OnPlayer1_Jump;
                @Player1_Jump.performed += instance.OnPlayer1_Jump;
                @Player1_Jump.canceled += instance.OnPlayer1_Jump;
                @Player1_Shoot.started += instance.OnPlayer1_Shoot;
                @Player1_Shoot.performed += instance.OnPlayer1_Shoot;
                @Player1_Shoot.canceled += instance.OnPlayer1_Shoot;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnPlayer1_Axis(InputAction.CallbackContext context);
        void OnPlayer1_Jump(InputAction.CallbackContext context);
        void OnPlayer1_Shoot(InputAction.CallbackContext context);
    }
}
